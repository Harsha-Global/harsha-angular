{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/about/about.component.html","webpack:///./src/app/admin/about/about.component.scss","webpack:///./src/app/admin/about/about.component.ts","webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/check-box-printer/check-box-printer.component.html","webpack:///./src/app/admin/check-box-printer/check-box-printer.component.scss","webpack:///./src/app/admin/check-box-printer/check-box-printer.component.ts","webpack:///./src/app/admin/dashboard/dashboard.component.html","webpack:///./src/app/admin/dashboard/dashboard.component.scss","webpack:///./src/app/admin/dashboard/dashboard.component.ts","webpack:///./src/app/admin/my-profile/my-profile.component.html","webpack:///./src/app/admin/my-profile/my-profile.component.scss","webpack:///./src/app/admin/my-profile/my-profile.component.ts","webpack:///./src/app/admin/project/project.component.html","webpack:///./src/app/admin/project/project.component.scss","webpack:///./src/app/admin/project/project.component.ts","webpack:///./src/app/admin/projects/projects.component.html","webpack:///./src/app/admin/projects/projects.component.scss","webpack:///./src/app/admin/projects/projects.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/can-activate-guard.service.ts","webpack:///./src/app/client-location-status-validator.directive.ts","webpack:///./src/app/client-location.ts","webpack:///./src/app/client-locations.service.ts","webpack:///./src/app/countries.service.ts","webpack:///./src/app/custom-validators.service.ts","webpack:///./src/app/dashboard.service.ts","webpack:///./src/app/filter.pipe.ts","webpack:///./src/app/jwt-interceptor.service.ts","webpack:///./src/app/jwt-un-authorized-interceptor.service.ts","webpack:///./src/app/login-view-model.ts","webpack:///./src/app/login.service.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/number-to-words.pipe.ts","webpack:///./src/app/project-idunique-validator.directive.ts","webpack:///./src/app/project.ts","webpack:///./src/app/projects.service.ts","webpack:///./src/app/sign-up/sign-up.component.html","webpack:///./src/app/sign-up/sign-up.component.scss","webpack:///./src/app/sign-up/sign-up.component.ts","webpack:///./src/app/tasks/tasks.component.html","webpack:///./src/app/tasks/tasks.component.scss","webpack:///./src/app/tasks/tasks.component.ts","webpack:///./src/app/team-size-validator.directive.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<p>\\n  about works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2Fib3V0L2Fib3V0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\nimport { MyProfileComponent } from \"./my-profile/my-profile.component\";\nimport { AboutComponent } from \"./about/about.component\";\nimport { DashboardService } from \"../dashboard.service\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TeamSizeValidatorDirective } from '../team-size-validator.directive';\nimport { ClientLocationStatusValidatorDirective } from '../client-location-status-validator.directive';\nimport { ProjectIDUniqueValidatorDirective } from '../project-idunique-validator.directive';\nimport { ProjectComponent } from './project/project.component';\nimport { CheckBoxPrinterComponent } from './check-box-printer/check-box-printer.component';\nimport { NumberToWordsPipe } from '../number-to-words.pipe';\nimport { FilterPipe } from '../filter.pipe';\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    MyProfileComponent,\n    AboutComponent,\n    ProjectsComponent,\n    TeamSizeValidatorDirective,\n    ClientLocationStatusValidatorDirective,\n    ProjectIDUniqueValidatorDirective,\n    ProjectComponent,\n    CheckBoxPrinterComponent,\n    NumberToWordsPipe,\n    FilterPipe\n  ],\n  imports: [ CommonModule, FormsModule ],\n  exports: [ DashboardComponent, MyProfileComponent, AboutComponent, ProjectsComponent, TeamSizeValidatorDirective, ClientLocationStatusValidatorDirective, ProjectIDUniqueValidatorDirective ],\n  providers: [ DashboardService ]\n})\nexport class AdminModule\n{\n}\n","module.exports = \"<div>\\n  <input type=\\\"checkbox\\\" value=\\\"true\\\" name=\\\"isChecked\\\" id=\\\"isChecked\\\" [(ngModel)]=\\\"isChecked\\\">\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2NoZWNrLWJveC1wcmludGVyL2NoZWNrLWJveC1wcmludGVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-check-box-printer',\n  templateUrl: './check-box-printer.component.html',\n  styleUrls: ['./check-box-printer.component.scss']\n})\nexport class CheckBoxPrinterComponent implements OnInit {\n  isChecked: boolean = false;\n\n  constructor() { }\n\n  ngOnInit()\n  {\n  }\n\n  check()\n  {\n    this.isChecked = true;\n  }\n\n  unCheck()\n  {\n    this.isChecked = false;\n  }\n}\n","module.exports = \"<nav>\\n  <ol class=\\\"breadcrumb\\\">\\n    <li class=\\\"breadcrumb-item\\\"><a routerLink=\\\"/\\\">Home</a></li>\\n    <li class=\\\"breadcrumb-item active\\\">Dashboard</li>\\n  </ol>\\n</nav>\\n\\n<h5>Dashboard</h5>\\n<h6>{{ToDay | date : \\\"d/M/y\\\"}}</h6>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-3 pb-3\\\" style=\\\"background-color:#e9e6e6\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-11 text-white text-center mx-auto rounded pt-2 pb-2 font-weight-bold\\\"\\n        style=\\\"background-color:#a39e9e; font-family:  'Arial Narrow Bold', sans-serif\\\">{{Designation | uppercase}}\\n      </div>\\n      <div class=\\\"col-12 text-center mt-2\\\">\\n        <img src=\\\"assets/user.png\\\" width=\\\"120px\\\">\\n      </div>\\n      <div class=\\\"col-12 text-center pt-2 pb-2 font-weight-bold\\\" style=\\\"font-family: Tahoma\\\">\\n        {{Username | lowercase}}\\n      </div>\\n      <div class=\\\"col-12 text-center pt-2 pb-2\\\" style=\\\"font-family: Arial\\\">TEAM SUMMARY</div>\\n      <div class=\\\"col-12 mb-3\\\">\\n        <ul class=\\\"list-group\\\">\\n          <li class=\\\"list-group-item d-flex justify-content-between align-items-center\\\">\\n            NO. OF TEAM MEMBERS\\n            <span class=\\\"badge badge-secondary badge-pill\\\" style=\\\"font-size:13px\\\">{{NoOfTeamMembers}}</span>\\n          </li>\\n          <li class=\\\"list-group-item d-flex justify-content-between align-items-center\\\">\\n            TOTAL COST OF ALL PROJECTS\\n            <span class=\\\"badge badge-secondary badge-pill\\\" style=\\\"font-size:13px\\\">$ {{TotalCostOfAllProjects}} k</span>\\n          </li>\\n          <li class=\\\"list-group-item d-flex justify-content-between align-items-center\\\">\\n            PENDING TASKS\\n            <span class=\\\"badge badge-secondary badge-pill\\\" style=\\\"font-size:13px\\\">{{PendingTasks}}</span>\\n          </li>\\n          <li class=\\\"list-group-item d-flex justify-content-between align-items-center\\\">\\n            UPCOMING PROJECTS\\n            <span class=\\\"badge badge-secondary badge-pill\\\" style=\\\"font-size:13px\\\">{{UpComingProjects | percent}}</span>\\n          </li>\\n        </ul>\\n      </div>\\n      <div class=\\\"col-12 text-center pt-2 pb-2\\\" style=\\\"font-family: 'Arial Narrow'\\\">CLIENTS</div>\\n      <div class=\\\"col-12\\\">\\n        <ul class=\\\"list-group list-group-flush\\\">\\n          <li class=\\\"list-group-item\\\" *ngFor=\\\"let client of Clients\\\">{{client | slice: 0: 10}}</li>\\n        </ul>\\n        <!--{{TeamMembersSummary}}-->\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-lg-6\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12 pt-0 pb-2\\\" style=\\\"background-color:#e9e6e6\\\">\\n        <div class=\\\"row mt-2\\\">\\n          <div class=\\\"col-6 text-left\\\">\\n            <div class=\\\"dropdown\\\">\\n              <button class=\\\"btn btn-secondary dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenuButton\\\"\\n                data-toggle=\\\"dropdown\\\">\\n                Project A\\n              </button>\\n              <div class=\\\"dropdown-menu\\\">\\n                <a class=\\\"dropdown-item\\\" href=\\\"#\\\" *ngFor=\\\"let project of Projects\\\" onclick=\\\"return false\\\"\\n                  (click)=\\\"onProjectChange($event)\\\">{{project}}</a>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-6 text-right\\\">\\n            <div class=\\\"dropdown\\\">\\n              <button class=\\\"btn btn-secondary dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenuButton\\\"\\n                data-toggle=\\\"dropdown\\\">\\n                2019\\n              </button>\\n              <div class=\\\"dropdown-menu\\\">\\n                  <a class=\\\"dropdown-item\\\" href=\\\"#\\\" *ngFor=\\\"let year of Years\\\">\\n                    <span [ngSwitch]=\\\"year\\\">\\n                      <span *ngSwitchCase=\\\" '2019' \\\" style=\\\"color:green\\\">{{year}}</span>\\n                      <span *ngSwitchCase=\\\" '2018' \\\" style=\\\"color:blue\\\">{{year}}</span>\\n                      <span *ngSwitchCase=\\\" '2017' \\\" style=\\\"color:red\\\">{{year}}</span>\\n                      <span *ngSwitchDefault style=\\\"color:black\\\">{{year}}</span>\\n                    </span>\\n                  </a>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-11 mx-auto mt-1 text-white text-center pt-2 pb-2 mx-auto rounded font-weight-bold\\\"\\n        style=\\\"background-color: #718d97; font-family: 'Arial Narrow'\\\">PROJECT BRIEFING</div>\\n      <div class=\\\"col-12\\\">\\n        <table class=\\\"table table-borderless\\\">\\n          <tr>\\n            <td>Project Cost</td>\\n            <td>{{ProjectCost | currency: \\\"INR\\\" }}</td>\\n          </tr>\\n          <tr>\\n            <td>Current Expenditure</td>\\n            <td>{{CurrentExpenditure | currency: \\\"INR\\\"}}</td>\\n          </tr>\\n          <tr>\\n            <td>Available Funds</td>\\n            <td>{{AvailableFunds | currency: \\\"INR\\\"}}</td>\\n          </tr>\\n        </table>\\n      </div>\\n      <div class=\\\"col-11 mx-auto mt-1 text-white text-center pt-2 pb-2 mx-2 rounded font-weight-bold\\\"\\n        style=\\\"background-color:#718d97; font-family: 'Arial Narrow'\\\">TEAM MEMBERS SUMMARY</div>\\n      <div class=\\\"col-12\\\">\\n        <table class=\\\"table\\\">\\n          <tr>\\n            <th>Region</th>\\n            <th>Team Members Count</th>\\n            <th>Temporarily Unavailable Members</th>\\n          </tr>\\n          <tr *ngFor=\\\"let teamMemberSumary of TeamMembersSummary\\\">\\n            <td>\\n              <b>{{teamMemberSumary.Region}}</b>\\n            </td>\\n            <td>\\n              {{teamMemberSumary.TeamMembersCount}}\\n            </td>\\n            <td>\\n              {{teamMemberSumary.TemporarilyUnavailableMembers}}\\n            </td>\\n          </tr>\\n\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-lg-3\\\" style=\\\"background-color:#e9e6e6\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-11 mx-auto mt-1 text-white text-center pt-1 pb-2 mx-2 rounded font-weight-bold\\\"\\n        style=\\\"background-color:#718d97; font-family: 'Arial Narrow'\\\">TEAM MEMBERS</div>\\n      <div class=\\\"col-lg-12 pt-2\\\">\\n        <div class=\\\"accordion\\\" id=\\\"accordion1\\\">\\n          <div class=\\\"card\\\" *ngFor=\\\"let teamMembersGroup of TeamMembers; let i = index\\\">\\n\\n\\n            <div class=\\\"card-header bg-secondary\\\" id=\\\"card1\\\">\\n              <h2 class=\\\"mb-0\\\">\\n                <button class=\\\"btn btn-link text-white\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\"\\n                  [attr.data-target]=\\\" '#cardbody' + i \\\">{{teamMembersGroup.Region}}</button>\\n              </h2>\\n            </div>\\n            <div [id]=\\\" 'cardbody' + i \\\" class=\\\"collapse\\\" data-parent=\\\"#accordion1\\\" [ngClass]=\\\"(i == 0)? 'show': '' \\\">\\n              <div class=\\\"card-body\\\">\\n\\n                <div *ngIf=\\\"i == 0; then firstTemplate; else secondTemplate\\\">\\n\\n                </div>\\n\\n                <ng-template #firstTemplate>\\n                  <div class=\\\"card\\\" *ngFor=\\\"let member of teamMembersGroup.Members\\\">\\n                    <div class=\\\"card-header bg-primary text-white\\\">#{{member.ID}} {{member.Name}}</div>\\n                    <div class=\\\"card-body\\\">{{member.Status}}</div>\\n                  </div>\\n                </ng-template>\\n\\n                <ng-template #secondTemplate>\\n                  <table class=\\\"table\\\">\\n                    <thead>\\n                      <tr>\\n                        <th>ID</th>\\n                        <th>Name</th>\\n                        <th>Status</th>\\n                      </tr>\\n                    </thead>\\n                    <tbody>\\n                      <tr *ngFor=\\\"let member of teamMembersGroup.Members\\\">\\n                        <td>{{member.ID}}</td>\\n                        <td [style.color]=\\\" (member.Status == 'Busy')? 'red': 'black' \\\">{{member.Name}}</td>\\n                        <td>{{member.Status}}</td>\\n                      </tr>\\n                    </tbody>\\n                  </table>\\n                </ng-template>\\n\\n\\n              </div>\\n            </div>\\n\\n\\n          </div>\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { DashboardService } from '../../dashboard.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit\n{\n  Designation: string;\n  Username: string;\n  NoOfTeamMembers: number;\n  TotalCostOfAllProjects: number;\n  PendingTasks: number;\n  UpComingProjects: number;\n  ProjectCost: number;\n  CurrentExpenditure: number;\n  AvailableFunds: number;\n  ToDay: Date;\n\n  Clients: string[];\n  Projects: string[];\n  Years: number[] = [];\n  TeamMembersSummary = [];\n  TeamMembers = [];\n\n  constructor(private dashboardService: DashboardService )\n  {\n  }\n\n  ngOnInit()\n  {\n    this.Designation = \"Team Leader\";\n    this.Username = \"Scott Smith\";\n    this.NoOfTeamMembers = 67;\n    this.TotalCostOfAllProjects = 240;\n    this.PendingTasks = 15;\n    this.UpComingProjects = 0.2;\n    this.ProjectCost = 2113507;\n    this.CurrentExpenditure = 96788;\n    this.AvailableFunds = 52536;\n    this.ToDay = new Date();\n\n    this.Clients = [\n      \"ABC Infotech Ltd.\", \"DEF Software Solutions\", \"GHI Industries\"\n    ];\n\n    this.Projects = [\n      \"Project A\", \"Project B\", \"Project C\", \"Project D\"\n    ];\n\n    for (var i = 2019; i >= 2010; i--) {\n      this.Years.push(i);\n    }\n\n    this.TeamMembersSummary = this.dashboardService.getTeamMembersSummary();\n\n\n    this.TeamMembers = [\n      {\n        Region: \"East\", Members: [\n          { ID: 1, Name: \"Ford\", Status: \"Available\" },\n          { ID: 2, Name: \"Miller\", Status: \"Available\" },\n          { ID: 3, Name: \"Jones\", Status: \"Busy\" },\n          { ID: 4, Name: \"James\", Status: \"Busy\" }\n        ]\n      },\n      {\n        Region: \"West\", Members: [\n          { ID: 5, Name: \"Anna\", Status: \"Available\" },\n          { ID: 6, Name: \"Arun\", Status: \"Available\" },\n          { ID: 7, Name: \"Varun\", Status: \"Busy\" },\n          { ID: 8, Name: \"Jasmine\", Status: \"Busy\" }\n        ]\n      },\n      {\n        Region: \"South\", Members: [\n          { ID: 9, Name: \"Krishna\", Status: \"Available\" },\n          { ID: 10, Name: \"Mohan\", Status: \"Available\" },\n          { ID: 11, Name: \"Raju\", Status: \"Busy\" },\n          { ID: 12, Name: \"Farooq\", Status: \"Busy\" }\n        ]\n      },\n      {\n        Region: \"North\", Members: [\n          { ID: 13, Name: \"Jacob\", Status: \"Available\" },\n          { ID: 14, Name: \"Smith\", Status: \"Available\" },\n          { ID: 15, Name: \"Jones\", Status: \"Busy\" },\n          { ID: 16, Name: \"James\", Status: \"Busy\" }\n        ]\n      }\n    ];\n  }\n\n  onProjectChange($event)\n  {\n    if($event.target.innerHTML == \"Project A\")\n    {\n      this.ProjectCost = 2113507;\n      this.CurrentExpenditure = 96788;\n      this.AvailableFunds = 52436;\n    }\n    else if($event.target.innerHTML == \"Project B\")\n    {\n      this.ProjectCost = 88923;\n      this.CurrentExpenditure = 22450;\n      this.AvailableFunds = 2640;\n    }\n    else if($event.target.innerHTML == \"Project C\")\n    {\n      this.ProjectCost = 662183;\n      this.CurrentExpenditure = 7721;\n      this.AvailableFunds = 9811;\n    }\n    else if($event.target.innerHTML == \"Project D\")\n    {\n      this.ProjectCost = 928431;\n      this.CurrentExpenditure = 562;\n      this.AvailableFunds = 883;\n    }\n  }\n}\n","module.exports = \"<p>\\n  my-profile works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL215LXByb2ZpbGUvbXktcHJvZmlsZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-my-profile',\n  templateUrl: './my-profile.component.html',\n  styleUrls: ['./my-profile.component.scss']\n})\nexport class MyProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"card card-primary\\\">\\n\\n  <div class=\\\"card-header\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-11\\\">\\n        <div>#{{project.projectID}}</div>\\n        <h5>{{project.projectName}}</h5>\\n      </div>\\n      <div class=\\\"col-1\\\">\\n        <ng-content></ng-content>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"card-body\\\">\\n    <table class=\\\"table table-borderless\\\" [hidden]=\\\"hideDetails\\\" #tbl>\\n      <tr>\\n        <th>Date of Start</th>\\n        <td>{{project.dateOfStart}}</td>\\n      </tr>\\n      <tr>\\n        <th>Team Size</th>\\n        <td>\\n          <span>{{project.teamSize}} </span>\\n          <span class=\\\"text-info\\\">{{project.teamSize | numberToWords}}</span>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>Client Location</th>\\n        <td>{{project.clientLocation?.clientLocationName}}</td>\\n      </tr>\\n      <tr>\\n        <th>Status</th>\\n        <td>{{project.status}}</td>\\n      </tr>\\n    </table>\\n  </div>\\n\\n  <div class=\\\"card-footer\\\">\\n    <button class=\\\"btn btn-info\\\" (click)=\\\"onEditClick($event, i)\\\" data-toggle=\\\"modal\\\" data-target=\\\"#editModal\\\">Edit</button>&nbsp;\\n    <button class=\\\"btn btn-warning\\\" (click)=\\\"onDeleteClick($event, i)\\\" data-toggle=\\\"modal\\\" data-target=\\\"#deleteModal\\\">Delete</button>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL3Byb2plY3QvcHJvamVjdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, Input, EventEmitter, Output, ContentChild, ContentChildren, QueryList, SimpleChanges, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewChecked, AfterViewInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { Project } from 'src/app/project';\nimport { ProjectsService } from 'src/app/projects.service';\nimport { Subscription } from 'rxjs';\nimport { CheckBoxPrinterComponent } from '../check-box-printer/check-box-printer.component';\n\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.scss']\n})\nexport class ProjectComponent implements OnChanges, OnInit, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy\n{\n  @Input(\"currentProject\") project: Project;\n  @Input(\"recordIndex\") i: number;\n\n  @Output() editClick = new EventEmitter();\n  @Output() deleteClick = new EventEmitter();\n\n  MySubscription: Subscription;\n\n  hideDetails: boolean = false;\n\n  constructor(public projectsService: ProjectsService)\n  {\n  }\n\n  ngOnChanges(simpleChanges: SimpleChanges)\n  {\n    console.info(\"--------------ngOnChanges called\");\n\n    for (let propName in simpleChanges)\n    {\n      let chng = simpleChanges[propName];\n      let cur = JSON.stringify(chng.currentValue);\n      let prev = JSON.stringify(chng.previousValue);\n      console.log(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\n    }\n\n    if (simpleChanges[\"project\"])\n    {\n      //this.project.teamSize += 1;\n    }\n  }\n\n  ngOnInit()\n  {\n    console.info(\"--------------ngOnInit called\");\n    this.MySubscription = this.projectsService.MySubject.subscribe((hide) =>\n    {\n      this.hideDetails = hide;\n    });\n  }\n\n  ngDoCheck()\n  {\n    console.info(\"--------------ngDoCheck called\");\n  }\n\n  ngAfterContentInit()\n  {\n    console.info(\"--------------ngAfterContentInit called\");\n    console.log(this.selectionBoxes.toArray());\n  }\n\n  ngAfterContentChecked()\n  {\n    console.info(\"--------------ngAfterContentChecked called\");\n  }\n\n  ngAfterViewInit()\n  {\n    console.info(\"--------------ngAfterViewInit called\");\n    console.log(this.tbl);\n  }\n\n  ngAfterViewChecked()\n  {\n    console.info(\"--------------ngAfterViewChecked called\");\n  }\n\n  @ViewChild(\"tbl\") tbl : ElementRef;\n\n  onEditClick(event, i)\n  {\n    this.editClick.emit({ event, i });\n  }\n\n  onDeleteClick(event, i)\n  {\n    this.deleteClick.emit({ event, i });\n  }\n\n  ngOnDestroy()\n  {\n    console.info(\"--------------ngOnDestroy called\");\n    this.MySubscription.unsubscribe();\n  }\n\n  @ContentChildren(\"selectionBox\") selectionBoxes: QueryList<CheckBoxPrinterComponent>;\n\n  isAllCheckedChange(b: boolean)\n  {\n    let selectionBox = this.selectionBoxes.toArray();\n    if (b)\n    {\n      for (let i = 0; i < selectionBox.length; i++)\n      {\n        selectionBox[i].check();\n      }\n    }\n    else\n    {\n      for (let i = 0; i < selectionBox.length; i++)\n      {\n        selectionBox[i].unCheck();\n      }\n    }\n  }\n}\n\n","module.exports = \"<h1>\\n  Projects List\\n  <i class=\\\"fa fa-circle-o-notch fa-spin\\\" style=\\\"font-size:34px\\\" *ngIf=\\\"showLoading\\\"></i>\\n</h1>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-xl-12 mx-auto\\\">\\n    <div class=\\\"form-group form-row\\\">\\n\\n      <div class=\\\"col-2\\\">\\n        <button class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#newModal\\\" (click)=\\\"onNewClick($event)\\\">Create Project</button>\\n      </div>\\n\\n      <div class=\\\"col-2\\\">\\n        <button class=\\\"btn btn-secondary\\\" (click)=\\\"onHideShowDetails($event)\\\">Hide/Show Details</button>\\n      </div>\\n\\n      <div class=\\\"col-1 custom-control custom-checkbox\\\">\\n        <input type=\\\"checkbox\\\" value=\\\"true\\\" name=\\\"isAllChecked\\\" id=\\\"isAllChecked\\\" [(ngModel)]=\\\"isAllChecked\\\" class=\\\"custom-control-input\\\" (change)=\\\"isAllCheckedChange($event)\\\">\\n        <label class=\\\"custom-control-label\\\" for=\\\"isAllChecked\\\">\\n        </label>\\n      </div>\\n\\n      <label for=\\\"drpSearchBy\\\" class=\\\"col-form-label col-1 text-right\\\">Search by:</label>\\n\\n      <div class=\\\"col-2\\\">\\n        <select class=\\\"form-control\\\" id=\\\"drpSearchBy\\\" name=\\\"SearchBy\\\" [(ngModel)]=\\\"searchBy\\\">\\n          <option value=\\\"projectID\\\">Project ID</option>\\n          <option value=\\\"projectName\\\">Project Name</option>\\n          <option value=\\\"dateOfStart\\\">Date of Start</option>\\n          <option value=\\\"teamSize\\\">Team Size</option>\\n        </select>\\n      </div>\\n\\n      <label for=\\\"textSearchText\\\" class=\\\"col-form-label col-1 text-right\\\">Search:</label>\\n\\n      <div class=\\\"col-3\\\">\\n        <div class=\\\"input-group\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"txtSearchText\\\" name=\\\"SearchText\\\" [(ngModel)]=\\\"searchText\\\">\\n          <div class=\\\"input-group-append\\\" (click)=\\\"onSearchClick()\\\">\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n          </div>\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-xl-12 mx-auto\\\">\\n    <div class=\\\"row\\\">\\n\\n      <div class=\\\"col-md-4\\\" *ngFor=\\\"let project of projects | filter: searchBy : searchText; let i = index\\\">\\n\\n        <app-project #prj [currentProject]=\\\"project\\\" [recordIndex]=\\\"i\\\" (editClick)=\\\"onEditClick(event, i)\\\" (deleteClick)=\\\"onDeleteClick(event, i)\\\">\\n          <app-check-box-printer #selectionBox>\\n          </app-check-box-printer>\\n        </app-project>\\n\\n      </div>\\n\\n    </div>\\n  </div>\\n</div>\\n\\n<form #newForm=\\\"ngForm\\\" novalidate=\\\"novalidate\\\" appClientLocationStatusValidator>\\n  <div class=\\\"modal\\\" role=\\\"dialog\\\" id=\\\"newModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\" style=\\\"width:700px\\\">\\n        <div class=\\\"modal-header bg-primary text-white\\\">\\n          <div class=\\\"modal-title\\\">New Project</div>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"><span>&times;</span></button>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtNewProjectID\\\" class=\\\"col-sm-4 col-form-label\\\">Project ID</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtNewProjectID\\\" style=\\\"width:130px\\\" class=\\\"form-control\\\" placeholder=\\\"Project ID\\\" name=\\\"ProjectID\\\" [(ngModel)]=\\\"newProject.projectID\\\" required=\\\"required\\\" pattern=\\\"^[0-9]*$\\\" appProjectIDUniqueValidator #newProjectID=\\\"ngModel\\\" #prjID [ngClass]=\\\"{ 'is-invalid': newProjectID.invalid && (newProjectID.dirty || newProjectID.touched || newForm.submitted), 'is-valid': newProjectID.valid && (newProjectID.dirty || newProjectID.touched || newForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectID.invalid && (newProjectID.dirty || newProjectID.touched || newForm.submitted) && newProjectID.errors?.required\\\">Project ID can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectID.invalid && (newProjectID.dirty || newProjectID.touched || newForm.submitted) && newProjectID.errors?.pattern\\\">Project ID should contain numbers only</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectID.invalid && (newProjectID.dirty || newProjectID.touched || newForm.submitted) && newProjectID.errors?.uniqueProjectID\\\">Duplicate Project ID</span>\\n\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtNewProjectName\\\" class=\\\"col-sm-4 col-form-label\\\">Project Name</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtNewProjectName\\\" class=\\\"form-control\\\" placeholder=\\\"Project Name\\\" name=\\\"ProjectName\\\" [(ngModel)]=\\\"newProject.projectName\\\" required=\\\"required\\\" minlength=\\\"3\\\" maxlength=\\\"30\\\" pattern=\\\"^[A-Za-z0-9 /-]*$\\\" #newProjectName=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': newProjectName.invalid && (newProjectName.dirty || newProjectName.touched || newForm.submitted), 'is-valid': newProjectName.valid && (newProjectName.dirty || newProjectName.touched || newForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectName.invalid && (newProjectName.dirty || newProjectName.touched || newForm.submitted) && newProjectName.errors?.required\\\">Project Name can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectName.invalid && (newProjectName.dirty || newProjectName.touched || newForm.submitted) && newProjectName.errors?.pattern\\\">Project Name can contain alphabets, digits, dot, hyphen or space only</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newProjectName.invalid && (newProjectName.dirty || newProjectName.touched || newForm.submitted) && newProjectName.errors?.minlength\\\">Project name should be at least 3 characters long</span>\\n\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtNewDateOfStart\\\" class=\\\"col-sm-4 col-form-label\\\">Date of Start</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"date\\\" id=\\\"txtNewDateOfStart\\\" style=\\\"width:180px\\\" class=\\\"form-control\\\" placeholder=\\\"Date of Start\\\" name=\\\"DateOfStart\\\" [(ngModel)]=\\\"newProject.dateOfStart\\\" required=\\\"required\\\" #newDateOfStart=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': newDateOfStart.invalid && (newDateOfStart.dirty || newDateOfStart.touched || newForm.submitted), 'is-valid': newDateOfStart.valid && (newDateOfStart.dirty || newDateOfStart.touched || newForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newDateOfStart.invalid && (newDateOfStart.dirty || newDateOfStart.touched || newForm.submitted) && newDateOfStart.errors?.required\\\">Date of Start can't be blank</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtTeamSize\\\" class=\\\"col-sm-4 col-form-label\\\">Team Size</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtTeamSize\\\" style=\\\"width:150px\\\" class=\\\"form-control\\\" placeholder=\\\"Team Size\\\" name=\\\"TeamSize\\\" [(ngModel)]=\\\"newProject.teamSize\\\" pattern=\\\"^[0-9]*$\\\" maxlength=\\\"7\\\" appTeamSizeValidator=\\\"5\\\" #newTeamSize=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': newTeamSize.invalid && (newTeamSize.dirty || newTeamSize.touched || newForm.submitted), 'is-valid': newTeamSize.valid && (newTeamSize.dirty || newTeamSize.touched || newForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newTeamSize.invalid && (newTeamSize.dirty || newTeamSize.touched || newForm.submitted) && newTeamSize.errors?.required\\\">Team Size should be a number</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newTeamSize.invalid && (newTeamSize.dirty || newTeamSize.touched || newForm.submitted) && newTeamSize.errors?.divisible\\\">Team Size should be divisble by 5</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"col-sm-4 col-form-label\\\">&nbsp;</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <div class=\\\"form-check\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"chkNewActive\\\" value=\\\"true\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"newProject.active\\\" name=\\\"active\\\">\\n                <label class=\\\"form-check-label\\\" for=\\\"chkNewActive\\\">Active</label>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"rbNewStatusInForce\\\" class=\\\"col-sm-4\\\">Status</label>\\n            <div class=\\\"col-sm-8\\\">\\n\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input type=\\\"radio\\\" id=\\\"rbNewStatusInForce\\\" value=\\\"In Force\\\" class=\\\"form-check-input\\\" name=\\\"Status\\\" [(ngModel)]=\\\"newProject.status\\\" required=\\\"required\\\" #newStatusInForce=\\\"ngModel\\\">\\n                <label for=\\\"rbNewStatusInForce\\\" class=\\\"form-check-label\\\">In Force</label>\\n              </div>\\n\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input type=\\\"radio\\\" id=\\\"rbNewStatusSupport\\\" value=\\\"Support\\\" class=\\\"form-check-input\\\" name=\\\"Status\\\" [(ngModel)]=\\\"newProject.status\\\" required=\\\"required\\\" #newStatusSupport=\\\"ngModel\\\">\\n                <label for=\\\"rbNewStatusSupport\\\" class=\\\"form-check-label\\\">Support</label>\\n              </div>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newStatusInForce.invalid && (newStatusInForce.dirty || newStatusInForce.touched || newForm.submitted) && newStatusInForce.errors?.required\\\">Please select status</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"drpNewClientLocation\\\" class=\\\"col-sm-4 col-form-label\\\">Client Location</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <select id=\\\"drpNewClientLocation\\\" class=\\\"form-control\\\" name=\\\"ClientLocation\\\" [(ngModel)]=\\\"newProject.clientLocationID\\\" required=\\\"required\\\" #newClientLocationID=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': newClientLocationID.invalid && (newClientLocationID.dirty || newClientLocationID.touched || newForm.submitted), 'is-valid': newClientLocationID.valid && (newClientLocationID.dirty || newClientLocationID.touched || newForm.submitted) }\\\">\\n                <option value=\\\"null\\\">Please Select</option>\\n                <option *ngFor=\\\"let clientLocation of clientLocations\\\" [value]=\\\"clientLocation.clientLocationID\\\">\\n                  {{clientLocation.clientLocationName}}\\n                </option>\\n              </select>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newClientLocationID.invalid && (newClientLocationID.dirty || newClientLocationID.touched || newForm.submitted) && newClientLocationID.errors?.required\\\">Please client location</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"newForm.invalid && (newForm.dirty || newForm.touched || newForm.submitted) && newForm.errors?.clientLocationStatus\\\">Support projects are not allowed at Tokyo</span>\\n            </div>\\n          </div>\\n\\n        </div>\\n        <div class=\\\"modal-footer\\\">\\n          <button class=\\\"btn btn-warning\\\" data-dismiss=\\\"modal\\\" id=\\\"newFormCancel\\\">Cancel</button>\\n          <button class=\\\"btn btn-success\\\" (click)=\\\"onSaveClick()\\\">Save</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n\\n<!-- Edit Project -->\\n<form #editForm=\\\"ngForm\\\" novalidate=\\\"novalidate\\\" appClientLocationStatusValidator>\\n  <div class=\\\"modal\\\" role=\\\"dialog\\\" id=\\\"editModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\" style=\\\"width:700px\\\">\\n        <div class=\\\"modal-header\\\">\\n          <div class=\\\"modal-title\\\">Edit Project</div>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"><span>&times;</span></button>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtEditProjectID\\\" class=\\\"col-sm-4 col-form-label\\\">Project ID</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtEditProjectID\\\" style=\\\"width:130px\\\" class=\\\"form-control-plain-text\\\" placeholder=\\\"Project ID\\\" name=\\\"ProjectID\\\" [(ngModel)]=\\\"editProject.projectID\\\" disabled=\\\"disabled\\\" required=\\\"required\\\" pattern=\\\"^[0-9]*$\\\" appProjectIDUniqueValidator #editProjectID=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': editProjectID.invalid && (editProjectID.dirty || editProjectID.touched || newForm.submitted), 'is-valid': editProjectID.valid && (editProjectID.dirty || editProjectID.touched || newForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectID.invalid && (editProjectID.dirty || editProjectID.touched || editForm.submitted) && editProjectID.errors?.required\\\">Project ID can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectID.invalid && (editProjectID.dirty || editProjectID.touched || editForm.submitted) && editProjectID.errors?.pattern\\\">Project ID should contain numbers only</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectID.invalid && (editProjectID.dirty || editProjectID.touched || editForm.submitted) && editProjectID.errors?.uniqueProjectID\\\">Duplicate Project ID</span>\\n\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtEditProjectName\\\" class=\\\"col-sm-4 col-form-label\\\">Project Name</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtEditProjectName\\\" class=\\\"form-control\\\" placeholder=\\\"Project Name\\\" name=\\\"ProjectName\\\" [(ngModel)]=\\\"editProject.projectName\\\" required=\\\"required\\\" minlength=\\\"3\\\" maxlength=\\\"30\\\" pattern=\\\"^[A-Za-z0-9 /-]*$\\\" #editProjectName=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': editProjectName.invalid && (editProjectName.dirty || editProjectName.touched || editForm.submitted), 'is-valid': editProjectName.valid && (editProjectName.dirty || editProjectName.touched || editForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectName.invalid && (editProjectName.dirty || editProjectName.touched || editForm.submitted) && editProjectName.errors?.required\\\">Project Name can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectName.invalid && (editProjectName.dirty || editProjectName.touched || editForm.submitted) && editProjectName.errors?.pattern\\\">Project Name can contain alphabets, digits, dot, hyphen or space only</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editProjectName.invalid && (editProjectName.dirty || editProjectName.touched || editForm.submitted) && editProjectName.errors?.minlength\\\">Project name should be at least 3 characters long</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtEditDateOfStart\\\" class=\\\"col-sm-4 col-form-label\\\">Date of Start</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"date\\\" id=\\\"txtEditDateOfStart\\\" style=\\\"width:180px\\\" class=\\\"form-control\\\" placeholder=\\\"Date of Start\\\" name=\\\"DateOfStart\\\" [(ngModel)]=\\\"editProject.dateOfStart\\\" required=\\\"required\\\" #editDateOfStart=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': editDateOfStart.invalid && (editDateOfStart.dirty || editDateOfStart.touched || editForm.submitted), 'is-valid': editDateOfStart.valid && (editDateOfStart.dirty || editDateOfStart.touched || editForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editDateOfStart.invalid && (editForm.submitted) && editDateOfStart.errors?.required\\\">Date of Start can't be blank</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtEditTeamSize\\\" class=\\\"col-sm-4 col-form-label\\\">Team Size</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtEditTeamSize\\\" style=\\\"width:150px\\\" class=\\\"form-control\\\" placeholder=\\\"Team Size\\\" name=\\\"TeamSize\\\" [(ngModel)]=\\\"editProject.teamSize\\\" pattern=\\\"^[0-9]*$\\\" maxlength=\\\"7\\\" appTeamSizeValidator=\\\"5\\\" #editTeamSize=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': editTeamSize.invalid && (editTeamSize.dirty || editTeamSize.touched || editForm.submitted), 'is-valid': editTeamSize.valid && (editTeamSize.dirty || editTeamSize.touched || editForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editTeamSize.invalid && (editTeamSize.dirty || editTeamSize.touched || editForm.submitted) && editTeamSize.errors?.required\\\">Team Size should be a number</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editTeamSize.invalid && (editTeamSize.dirty || editTeamSize.touched || editForm.submitted) && editTeamSize.errors?.divisible\\\">Team Size should be divisble by 5</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label class=\\\"col-sm-4\\\">&nbsp;</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <div class=\\\"form-check\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"chkEditActive\\\" value=\\\"true\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"editProject.active\\\" name=\\\"active\\\">\\n                <label class=\\\"form-check-label\\\" for=\\\"chkEditActive\\\">Active</label>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"rbEditStatusInForce\\\" class=\\\"col-sm-4\\\">Status</label>\\n            <div class=\\\"col-sm-8\\\">\\n\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input type=\\\"radio\\\" id=\\\"rbEditStatusInForce\\\" value=\\\"In Force\\\" class=\\\"form-check-input\\\" name=\\\"Status\\\" [(ngModel)]=\\\"editProject.status\\\" required=\\\"required\\\" #editStatusInForce=\\\"ngModel\\\">\\n                <label for=\\\"rbEditStatusInForce\\\" class=\\\"form-check-label\\\">In Force</label>\\n              </div>\\n\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input type=\\\"radio\\\" id=\\\"rbEditStatusSupport\\\" value=\\\"Support\\\" class=\\\"form-check-input\\\" name=\\\"Status\\\" [(ngModel)]=\\\"editProject.status\\\" required=\\\"required\\\" #editStatusSupport=\\\"ngModel\\\">\\n                <label for=\\\"rbEditStatusSupport\\\" class=\\\"form-check-label\\\">Support</label>\\n              </div>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editStatusInForce.invalid && (editStatusInForce.dirty || editStatusInForce.touched || editForm.submitted) && editStatusInForce.errors?.required\\\">Please select status</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"drpEditClientLocation\\\" class=\\\"col-sm-4 col-form-label\\\">Client Location</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <select id=\\\"drpEditClientLocation\\\" class=\\\"form-control\\\" name=\\\"ClientLocation\\\" [(ngModel)]=\\\"editProject.clientLocationID\\\" required=\\\"required\\\" #editClientLocationID=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': editClientLocationID.invalid && (editClientLocationID.dirty || editClientLocationID.touched || editForm.submitted), 'is-valid': editClientLocationID.valid && (editClientLocationID.dirty || editClientLocationID.touched || editForm.submitted) }\\\">\\n                <option value=\\\"null\\\">Please Select</option>\\n                <option *ngFor=\\\"let clientLocation of clientLocations\\\" [value]=\\\"clientLocation.clientLocationID\\\">\\n                  {{clientLocation.clientLocationName}}\\n                </option>\\n              </select>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editClientLocationID.invalid && (editClientLocationID.dirty || editClientLocationID.touched || editForm.submitted) && editClientLocationID.errors?.required\\\">Please client location</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"editForm.invalid && (editForm.dirty || editForm.touched || editForm.submitted) && editForm.errors?.clientLocationStatus\\\">Support projects are not allowed at Tokyo</span>\\n            </div>\\n          </div>\\n\\n        </div>\\n        <div class=\\\"modal-footer\\\">\\n          <button class=\\\"btn btn-warning\\\" data-dismiss=\\\"modal\\\" id=\\\"editFormCancel\\\">Cancel</button>\\n          <button class=\\\"btn btn-success\\\" (click)=\\\"onUpdateClick()\\\">Update</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n\\n\\n<!-- Delete Project -->\\n<form>\\n  <div class=\\\"modal\\\" role=\\\"dialog\\\" id=\\\"deleteModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\" style=\\\"width:700px\\\">\\n        <div class=\\\"modal-header\\\">\\n          <div class=\\\"modal-title\\\">Delete Project</div>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"><span>&times;</span></button>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n\\n          <div class=\\\"text-warning\\\">Are you sure to delete this Project?</div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtDeleteProjectID\\\" class=\\\"col-sm-4 col-form-label\\\">Project ID</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtDeleteProjectID\\\" style=\\\"width:100px\\\" class=\\\"form-control-plain-text\\\" placeholder=\\\"Project ID\\\" name=\\\"ProjectID\\\" [(ngModel)]=\\\"deleteProject.projectID\\\" disabled=\\\"disabled\\\">\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group row\\\">\\n            <label for=\\\"txtDeleteProjectName\\\" class=\\\"col-sm-4 col-form-label\\\">Project Name</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input type=\\\"text\\\" id=\\\"txtDeleteProjectName\\\" class=\\\"form-control-plain-text\\\" placeholder=\\\"Project Name\\\" name=\\\"ProjectName\\\" [(ngModel)]=\\\"deleteProject.projectName\\\" disabled=\\\"disabled\\\">\\n            </div>\\n          </div>\\n\\n        </div>\\n        <div class=\\\"modal-footer\\\">\\n          <button class=\\\"btn btn-warning\\\" data-dismiss=\\\"modal\\\">Cancel</button>\\n          <button class=\\\"btn btn-success\\\" data-dismiss=\\\"modal\\\" (click)=\\\"onDeleteConfirmClick()\\\">Delete</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL3Byb2plY3RzL3Byb2plY3RzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild, ViewChildren, QueryList, ElementRef } from '@angular/core';\nimport { ProjectsService } from \"../../projects.service\";\nimport { Project } from '../../project';\nimport { ClientLocation } from '../../client-location';\nimport { ClientLocationsService } from '../../client-locations.service';\nimport { NgForm } from '@angular/forms';\nimport * as $ from \"jquery\";\nimport { ProjectComponent } from '../project/project.component';\n\n@Component({\n  selector: 'app-projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss']\n})\nexport class ProjectsComponent implements OnInit\n{\n  projects: Project[] = [];\n  clientLocations: ClientLocation[] = [];\n  showLoading: boolean = true;\n\n  newProject: Project = new Project();\n  editProject: Project = new Project();\n  editIndex: number = null;\n  deleteProject: Project = new Project();\n  deleteIndex: number = null;\n  searchBy: string = \"projectName\";\n  searchText: string = \"\";\n\n  @ViewChild(\"newForm\") newForm: NgForm;\n  @ViewChild(\"editForm\") editForm: NgForm;\n\n  constructor(private projectsService: ProjectsService, private clientLocationsService: ClientLocationsService)\n  {\n  }\n  \n  ngOnInit()\n  {\n    this.projectsService.getAllProjects().subscribe(\n      (response: Project[]) =>\n      {\n        this.projects = response;\n        this.showLoading = false;\n      }\n    );\n\n    this.clientLocationsService.getClientLocations().subscribe(\n      (response) =>\n      {\n        this.clientLocations = response;\n      }\n    );\n  }\n\n  isAllChecked: boolean = false;\n\n  @ViewChildren(\"prj\") projs : QueryList<ProjectComponent>;\n\n  isAllCheckedChange(event)\n  {\n    let proj = this.projs.toArray();\n    for (let i = 0; i < proj.length; i++)\n    {\n      proj[i].isAllCheckedChange(this.isAllChecked);\n    }\n  }\n\n  @ViewChild(\"prjID\") prjID: ElementRef;\n\n  onNewClick(event)\n  {\n    this.newForm.resetForm();\n    setTimeout(() => {\n      this.prjID.nativeElement.focus();\n    }, 100);\n  }\n\n  onSaveClick()\n  {\n    if (this.newForm.valid)\n    {\n      this.newProject.clientLocation.clientLocationID = 0;\n      this.projectsService.insertProject(this.newProject).subscribe((response) =>\n      {\n        //Add Project to Grid\n        var p: Project = new Project();\n        p.projectID = response.projectID;\n        p.projectName = response.projectName;\n        p.dateOfStart = response.dateOfStart;\n        p.teamSize = response.teamSize;\n        p.clientLocation = response.clientLocation;\n        p.active = response.active;\n        p.clientLocationID = response.clientLocationID;\n        p.status = response.status;\n        this.projects.push(p);\n\n        //Clear New Project Dialog - TextBoxes\n        this.newProject.projectID = null;\n        this.newProject.projectName = null;\n        this.newProject.dateOfStart = null;\n        this.newProject.teamSize = null;\n        this.newProject.active = false;\n        this.newProject.clientLocationID = null;\n        this.newProject.status = null;\n\n        $(\"#newFormCancel\").trigger(\"click\");\n      }, (error) =>\n        {\n          console.log(error);\n        });\n    }\n  }\n\n  onEditClick(event, index: number)\n  {\n    this.editForm.resetForm();\n    setTimeout(() =>\n    {\n      this.editProject.projectID = this.projects[index].projectID;\n      this.editProject.projectName = this.projects[index].projectName;\n      this.editProject.dateOfStart = this.projects[index].dateOfStart.split(\"/\").reverse().join(\"-\"); //yyyy-MM-dd\n      this.editProject.teamSize = this.projects[index].teamSize;\n      this.editProject.active = this.projects[index].active;\n      this.editProject.clientLocationID = this.projects[index].clientLocationID;\n      this.editProject.clientLocation = this.projects[index].clientLocation;\n      this.editProject.status = this.projects[index].status;\n      this.editIndex = index;\n    }, 100);\n  }\n\n  onUpdateClick()\n  {\n    if (this.editForm.valid)\n    {\n      this.projectsService.updateProject(this.editProject).subscribe((response: Project) =>\n      {\n        var p: Project = new Project();\n        p.projectID = response.projectID;\n        p.projectName = response.projectName;\n        p.dateOfStart = response.dateOfStart;\n        p.teamSize = response.teamSize;\n        p.clientLocation = response.clientLocation;\n        p.active = response.active;\n        p.clientLocationID = response.clientLocationID;\n        p.status = response.status;\n        this.projects[this.editIndex] = p;\n\n        this.editProject.projectID = null;\n        this.editProject.projectName = null;\n        this.editProject.dateOfStart = null;\n        this.editProject.teamSize = null;\n        this.newProject.active = false;\n        this.newProject.clientLocationID = null;\n        this.newProject.status = null;\n\n        $(\"#editFormCancel\").trigger(\"click\");\n      },\n        (error) =>\n        {\n          console.log(error);\n        });\n    }\n  }\n\n  onDeleteClick(event, index: number)\n  {\n    this.deleteIndex = index;\n    this.deleteProject.projectID = this.projects[index].projectID;\n    this.deleteProject.projectName = this.projects[index].projectName;\n    this.deleteProject.dateOfStart = this.projects[index].dateOfStart;\n    this.deleteProject.teamSize = this.projects[index].teamSize;\n  }\n\n  onDeleteConfirmClick()\n  {\n    this.projectsService.deleteProject(this.deleteProject.projectID).subscribe(\n      (response) =>\n      {\n        this.projects.splice(this.deleteIndex, 1);\n        this.deleteProject.projectID = null;\n        this.deleteProject.projectName = null;\n        this.deleteProject.teamSize = null;\n        this.deleteProject.dateOfStart = null;\n      },\n      (error) =>\n      {\n        console.log(error);\n      });\n  }\n\n  onSearchClick()\n  {\n    this.projectsService.SearchProjects(this.searchBy, this.searchText).subscribe(\n      (response: Project[]) =>\n      {\n        this.projects = response;\n      },\n      (error) => \n      {\n        console.log(error);\n      });\n  }\n\n  onHideShowDetails(event)\n  {\n    this.projectsService.toggleDetails();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from \"./admin/dashboard/dashboard.component\";\nimport { AboutComponent } from \"./admin/about/about.component\";\nimport { ProjectsComponent } from \"./admin/projects/projects.component\";\nimport { LoginComponent } from './login/login.component';\nimport { CanActivateGuardService } from './can-activate-guard.service';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { TasksComponent } from './tasks/tasks.component';\n\nconst routes: Routes = [\n  { path: \"\", redirectTo: \"login\", pathMatch: \"full\" },\n  { path: \"login\", component: LoginComponent },\n  { path: \"signup\", component: SignUpComponent },\n  { path: \"dashboard\", component: DashboardComponent, canActivate: [ CanActivateGuardService ], data: { expectedRole: \"Admin\" } },\n  { path: \"about\", component: AboutComponent },\n  { path: \"projects\", component: ProjectsComponent, canActivate: [ CanActivateGuardService ], data: { expectedRole: \"Admin\" } },\n  { path: \"tasks\", component: TasksComponent, canActivate: [ CanActivateGuardService ], data: { expectedRole: \"Employee\" } },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule\n{\n}\n","module.exports = \"<nav class=\\\"navbar navbar-expand-sm bg-success navbar-dark\\\">\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">\\n        Angular Task Manager\\n    </a>\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#mynav\\\">\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"mynav\\\">\\n        <ul class=\\\"navbar-nav mr-auto\\\">\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName != null\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"dashboard\\\">Dashboard</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"about\\\">About</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName != null\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"projects\\\">Projects</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName != null\\\">\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\">{{loginService.currentUserName}}</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName != null\\\">\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" (click)=\\\"loginService.Logout()\\\">Logout</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName == null\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"login\\\">Login</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"loginService.currentUserName == null\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"signup\\\">Sign Up</a>\\n            </li>\\n        </ul>\\n        <form class=\\\"form-inline my-2 my-lg-0\\\">\\n            <div class=\\\"input-group\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\" id=\\\"search\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n                </div>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search\\\">\\n            </div>\\n            <button class=\\\"btn btn-warning my2- my-sm-0\\\" type=\\\"button\\\" (click)=\\\"onSearchClick()\\\">Search</button>\\n        </form>\\n    </div>\\n</nav>\\n\\n<div class=\\\"container-fluid\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\nimport { LoginService } from './login.service';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent\n{\n  constructor(private loginService : LoginService, private domSanitizer : DomSanitizer)\n  {\n  }\n  \n  onSearchClick()\n  {\n    console.log(this.loginService.currentUserName);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { JwtModule } from \"@auth0/angular-jwt\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AdminModule } from './admin/admin.module';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { LoginComponent } from './login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { JwtInterceptorService } from './jwt-interceptor.service';\nimport { JwtUnAuthorizedInterceptorService } from './jwt-un-authorized-interceptor.service';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { TasksComponent } from './tasks/tasks.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignUpComponent,\n    TasksComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    AdminModule,\n    FormsModule,\n    ReactiveFormsModule,\n    JwtModule.forRoot( {\n      config: {\n        tokenGetter: () => {\n          return (sessionStorage.getItem(\"currentUser\")? JSON.parse(sessionStorage.getItem(\"currentUser\")).token : null)\n        }\n      }\n    })\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptorService,\n      multi: true\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtUnAuthorizedInterceptorService,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { LoginService } from './login.service';\nimport { Router, CanActivate, ActivatedRouteSnapshot } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanActivateGuardService implements CanActivate\n{\n  constructor(private loginService : LoginService, private router : Router, private jwtHelperService : JwtHelperService)\n  {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot) : boolean\n  {\n    //console.log(this.router.url);\n    var token = sessionStorage.getItem(\"currentUser\")? JSON.parse(sessionStorage.getItem(\"currentUser\")).token : null;\n    if (this.loginService.isAuthenticated() && this.jwtHelperService.decodeToken(token).role == route.data.expectedRole)\n    {\n      return true; //the user can navigate to the particular route\n    }\n    else\n    {\n      this.router.navigate([ \"login\" ]);\n      return false; //the user can't navigate to the particular route\n    }\n  }\n}\n","import { Directive } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\n\n@Directive({\n  selector: '[appClientLocationStatusValidator]',\n  providers: [ { provide: NG_VALIDATORS, useExisting: ClientLocationStatusValidatorDirective, multi: true }]\n})\nexport class ClientLocationStatusValidatorDirective implements Validator\n{\n  constructor()\n  {\n  }\n\n  validate(control: AbstractControl) : ValidationErrors | null\n  {\n    let isValid = true;\n    if (control.value.ClientLocation == 6 && control.value.Status == \"Support\")\n    {\n      isValid = false; //indicates invalid\n    }\n\n    if (isValid == true)\n    {\n      return null; //valid\n    }\n    else\n    {\n      return { clientLocationStatus: { valid: false }}; //invalid\n    }\n  }\n\n}\n","export class ClientLocation\n{\n    clientLocationID: number;\n    clientLocationName: string;\n\n    constructor()\n    {\n        this.clientLocationID = null;\n        this.clientLocationName = null;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ClientLocation } from './client-location';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientLocationsService\n{\n  constructor(private httpClient : HttpClient)\n  {\n  }\n\n  getClientLocations(): Observable<ClientLocation[]>\n  {\n    return this.httpClient.get<ClientLocation[]>(\"/api/clientlocations\", { responseType: \"json\" });\n  }\n}\n\n\n\n","import { Injectable } from '@angular/core';\nimport { Country } from './country';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService\n{\n  constructor(private httpClient: HttpClient)\n  {\n  }\n\n  getCountries(): Observable<Country[]>\n  {\n    return this.httpClient.get<Country[]>(\"/api/countries\", { responseType: \"json\" });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ValidatorFn, AbstractControl, ValidationErrors, FormGroup, AsyncValidatorFn } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { LoginService } from './login.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomValidatorsService\n{\n  constructor(private loginService: LoginService)\n  {\n  }\n\n  public minimumAgeValidator(minAge: number): ValidatorFn\n  {\n    return (control: AbstractControl): ValidationErrors | null =>\n    {\n      if (!control.value)\n        return null; //return, if the date of birth is null\n\n      var today = new Date();\n      var dateOfBirth = new Date(control.value);\n      var diffMilliSeconds = Math.abs(today.getTime() - dateOfBirth.getTime());\n      var diffYears = (diffMilliSeconds / (1000 * 60 * 60 * 24)) / 365.25;\n\n      if (diffYears >= minAge)\n        return null; //valid\n      else\n        return { minAge: { valid: false } }; //invalid\n    };\n  }\n\n  public compareValidator(controlToValidate: string, controlToCompare: string): ValidatorFn\n  {\n    return (formGroup: FormGroup): ValidationErrors | null =>\n    {\n      if (!formGroup.get(controlToValidate).value)\n        return null; //return, if the confirm password is null\n\n      if (formGroup.get(controlToValidate).value == formGroup.get(controlToCompare).value)\n        return null; //valid\n      else\n      {\n        formGroup.get(controlToValidate).setErrors({ compareValidator: { valid: false } });\n        return { compareValidator: { valid: false } }; //invalid\n      }\n    };\n  }\n\n  public DuplicateEmailValidator(): AsyncValidatorFn\n  {\n    return (control: AbstractControl): Observable<ValidationErrors | null> =>\n    {\n      return this.loginService.getUserByEmail(control.value).pipe(map((existingUser: any) =>\n      {\n        if (existingUser != null)\n        {\n          return { uniqueEmail: { valid: false } }; //invalid\n        }\n        else\n        {\n          return null;\n        }\n      }));\n    };\n  }\n}\n\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DashboardService\n{\n  getTeamMembersSummary(): any[]\n  {\n    var TeamMembersSummary = [\n      { Region: \"East\", TeamMembersCount: 20, TemporarilyUnavailableMembers: 4 },\n      { Region: \"West\", TeamMembersCount: 15, TemporarilyUnavailableMembers: 8 },\n      { Region: \"South\", TeamMembersCount: 17, TemporarilyUnavailableMembers: 1 },\n      { Region: \"North\", TeamMembersCount: 15, TemporarilyUnavailableMembers: 6 }\n    ];\n    return TeamMembersSummary;\n  }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Project } from './project';\n\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform\n{\n  transform(value: Project[], searchBy: string, searchText: string): any\n  {\n    if (value == null)\n    {\n      return value;\n    }\n\n    let resultArray = [];\n    for (let item of value)\n    {\n      if (String(item[searchBy]).toLowerCase().indexOf(searchText.toLowerCase()) >= 0)\n      {\n        resultArray.push(item);\n      }\n    }\n\n    return resultArray;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtInterceptorService implements HttpInterceptor\n{\n  constructor()\n  {\n  }\n\n  intercept(request : HttpRequest<any>, next : HttpHandler) : Observable<HttpEvent<any>>\n  {\n    var currentUser = { token: \"\" };\n    if (sessionStorage.currentUser != null)\n    {\n      currentUser = JSON.parse(sessionStorage.currentUser);\n    }\n\n    request = request.clone({\n      setHeaders: {\n        Authorization: \"Bearer \" + currentUser.token\n      }}\n    );\n\n    return next.handle(request);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtUnAuthorizedInterceptorService implements HttpInterceptor\n{\n  constructor()\n  {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>\n  {\n    return next.handle(request).pipe(tap(\n\n      (event: HttpEvent<any>) =>\n      {\n        if (event instanceof HttpResponse)\n        {\n          //do something with response\n        }\n      },\n\n      (error: any) =>\n      {\n        if (error instanceof HttpErrorResponse)\n        {\n          if (error.status == 401)\n          {\n            console.log(error);\n            alert(\"401 UnAuthorized\");\n          }\n        }\n      }\n\n    ));\n  }\n}\n\n\n","export class LoginViewModel\n{\n    UserName: string;\n    Password: string;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpBackend } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LoginViewModel } from './login-view-model';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { SignUpViewModel } from './sign-up-view-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService\n{\n  private httpClient : HttpClient;\n\n  constructor(private httpBackend: HttpBackend, private jwtHelperService : JwtHelperService)\n  {\n  }\n\n  currentUserName: string  = null;\n\n  public Login(loginViewModel: LoginViewModel): Observable<any>\n  {\n    this.httpClient = new HttpClient(this.httpBackend);\n    return this.httpClient.post<any>(\"/authenticate\", loginViewModel, { responseType: \"json\", observe: \"response\" })\n    .pipe(map(response => {\n      if (response)\n      {\n        this.currentUserName = response.body.userName;\n        sessionStorage.currentUser = JSON.stringify(response.body);\n        sessionStorage.XSRFRequestToken = response.headers.get(\"XSRF-REQUEST-TOKEN\");\n      }\n      return response.body;\n    }));\n  }\n\n  public Register(signUpViewModel: SignUpViewModel): Observable<any>\n  {\n    this.httpClient = new HttpClient(this.httpBackend);\n    return this.httpClient.post<any>(\"/register\", signUpViewModel, { responseType: \"json\", observe: \"response\" })\n    .pipe(map(response => {\n      if (response)\n      {\n        this.currentUserName = response.body.userName;\n        sessionStorage.currentUser = JSON.stringify(response.body);\n        sessionStorage.XSRFRequestToken = response.headers.get(\"XSRF-REQUEST-TOKEN\");\n      }\n      return response.body;\n    }));\n  }\n\n  getUserByEmail(Email: string): Observable<any>\n  {\n    this.httpClient = new HttpClient(this.httpBackend);\n    return this.httpClient.get<any>(\"/api/getUserByEmail/\" + Email, { responseType: \"json\" });\n  }\n\n  public Logout()\n  {\n    sessionStorage.removeItem(\"currentUser\");\n    this.currentUserName = null;\n  }\n\n  public isAuthenticated() : boolean\n  {\n    var token = sessionStorage.getItem(\"currentUser\")? JSON.parse(sessionStorage.getItem(\"currentUser\")).token : null;\n    if (this.jwtHelperService.isTokenExpired())\n    {\n      return false; //token is not valid\n    }\n    else\n    {\n      return true; //token is valid\n    }\n  }\n}\n\n\n","module.exports = \"<form>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-6 col-xl-5 col-md-9 mx-auto\\\">\\n      <div class=\\\"card mt-4\\\">\\n        <div class=\\\"card-header bg-secondary text-white\\\">\\n          <h3>Login</h3>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"UserName\\\" class=\\\"col-md-4 col-form-label\\\">Username</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" [(ngModel)]=\\\"loginViewModel.UserName\\\" name=\\\"UserName\\\" autofocus=\\\"autofocus\\\">\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"Password\\\" class=\\\"col-md-4 col-form-label\\\">Password</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"loginViewModel.Password\\\" name=\\\"Password\\\">\\n            </div>\\n          </div>\\n\\n        </div>\\n\\n        <div class=\\\"card-footer text-right\\\">\\n          <span class=\\\"text-danger\\\">{{loginError}}&nbsp;</span>\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"onLoginClick($event)\\\">Login</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { LoginViewModel } from '../login-view-model';\nimport { LoginService } from '../login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit\n{\n  loginViewModel: LoginViewModel = new LoginViewModel();\n  loginError: string = \"\";\n\n  constructor(private loginService: LoginService, private router : Router) \n  {\n  }\n\n  ngOnInit()\n  {\n  }\n\n  onLoginClick(event)\n  {\n    this.loginService.Login(this.loginViewModel).subscribe(\n      (response) => {\n        this.router.navigateByUrl(\"/dashboard\");\n      },\n      (error) => {\n        console.log(error);\n        this.loginError = \"Invalid Username or Password\";\n      },\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'numberToWords'\n})\nexport class NumberToWordsPipe implements PipeTransform\n{\n  transform(value: any, separator: string = \", \"): any\n  {\n    if (value == null)\n    {\n      return null;\n    }\n    else\n    {\n      return this.inWords(value, separator);\n    }\n  }\n\n  private inWords = (n, separator) =>\n  {\n    let a = [\n      '', 'One', 'Two', 'Three', 'Four',\n      'Five', 'Six', 'Seven', 'Eight', 'Nine',\n      'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen',\n      'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'\n    ];\n\n    let b = [\n      '', '', 'Twenty', 'Thirty', 'Forty',\n      'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'\n    ];\n\n    let g = [\n      '', 'Thousand', 'Million', 'Billion', 'Trillion', 'Quadrillion',\n      'Quintillion', 'Sextillion', 'Septillion', 'Octillion', 'Nonillion'\n    ];\n\n    const arr = x => Array.from(x);\n    const num = x => Number(x) || 0;\n    const str = x => String(x);\n    const isEmpty = xs => xs.length === 0;\n    const take = n => xs => xs.slice(0, n);\n    const drop = n => xs => xs.slice(n);\n    const reverse = xs => xs.slice(0).reverse();\n    const comp = f => g => x => f(g(x));\n    const not = x => !x;\n    const chunk = n => xs =>\n      isEmpty(xs) ? [] : [take(n)(xs), ...chunk(n)(drop(n)(xs))];\n\n    let makeGroup = ([ones, tens, huns]) =>\n    {\n      return [\n        num(huns) === 0 ? '' : a[huns] + ' Hundred ',\n        num(ones) === 0 ? b[tens] : b[tens] && b[tens] + '-' || '',\n        a[tens + ones] || a[ones]\n      ].join('');\n    };\n\n    let thousand = (group, i) => group === '' ? group : `${group} ${g[i]}`;\n\n    if (typeof n === 'number')\n      return this.inWords(str(n), separator);\n    else if (n === '0')\n      return 'Zero';\n    else\n      return comp(chunk(3))(reverse)(arr(n))\n        .map(makeGroup)\n        .map(thousand)\n        .filter(comp(not)(isEmpty))\n        .reverse()\n        .join(separator);\n  }\n}\n","import { Directive } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, AsyncValidator, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { ProjectsService } from './projects.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Project } from './project';\n\n@Directive({\n  selector: '[appProjectIDUniqueValidator]',\n  providers: [ { provide: NG_ASYNC_VALIDATORS, useExisting: ProjectIDUniqueValidatorDirective, multi: true }]\n})\nexport class ProjectIDUniqueValidatorDirective implements AsyncValidator\n{\n  constructor(private projectsService: ProjectsService)\n  {\n  }\n\n  validate(control: AbstractControl) : Observable<ValidationErrors | null>\n  {\n    return this.projectsService.getProjectByProjectID(control.value).pipe(map( (existingProject: Project) => {\n      if (existingProject != null)\n      {\n        return { uniqueProjectID: { valid: false }};\n      }\n      else\n      {\n        return null;\n      }\n    }));\n  }\n}\n","import { ClientLocation } from './client-location';\n\nexport class Project\n{\n    projectID: number;\n    projectName: string;\n    dateOfStart: string;\n    teamSize: number;\n    active: boolean;\n    status: string;\n    clientLocationID: number;\n    clientLocation: ClientLocation;\n\n    constructor()\n    {\n        this.projectID = null;\n        this.projectName = null;\n        this.dateOfStart = null;\n        this.teamSize = null;\n        this.active = true;\n        this.status = null;\n        this.clientLocationID = null;\n        this.clientLocation = new ClientLocation();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Observable, Observer, Subject, BehaviorSubject } from 'rxjs';\nimport { Project } from './project';\nimport { map } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectsService\n{\n  public MySubject: BehaviorSubject<boolean>;\n\n  constructor(private httpClient: HttpClient)\n  {\n    this.MySubject = new BehaviorSubject<boolean>(false);\n  }\n\n  toggleDetails()\n  {\n    this.MySubject.next(!this.MySubject.value);\n  }\n\n  getAllProjects(): Observable<Project[]>\n  {\n    return this.httpClient.get<Project[]>(\"/api/projects\", { responseType: \"json\" })\n      .pipe(map(\n        (data: Project[]) =>\n        {\n          for (let i = 0; i < data.length; i++)\n          {\n            //data[i].teamSize = data[i].teamSize * 100;\n          }\n          return data;\n        }\n      ));\n  }\n\n  getProjectByProjectID(ProjectID: number): Observable<Project>\n  {\n    return this.httpClient.get<Project>(\"/api/projects/searchbyprojectid/\" + ProjectID, { responseType: \"json\" });\n  }\n\n  insertProject(newProject: Project): Observable<Project>\n  {\n    var requestHeaders = new HttpHeaders();\n    requestHeaders = requestHeaders.set(\"X-XSRF-TOKEN\", sessionStorage.XSRFRequestToken);\n    return this.httpClient.post<Project>(\"/api/projects\", newProject, { headers: requestHeaders, responseType: \"json\" });\n  }\n\n  updateProject(existingProject: Project): Observable<Project>\n  {\n    return this.httpClient.put<Project>(\"/api/projects\", existingProject, { responseType: \"json\" });\n  }\n\n  deleteProject(ProjectID: number): Observable<string>\n  {\n    return this.httpClient.delete<string>(\"/api/projects?ProjectID=\" + ProjectID);\n  }\n\n  SearchProjects(searchBy: string, searchText: string): Observable<Project[]>\n  {\n    return this.httpClient.get<Project[]>(\"/api/projects/search/\" + searchBy + \"/\" + searchText, { responseType: \"json\" });\n  }\n}\n\n\n\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-8 col-xl-6 mx-auto\\\">\\n\\n    <form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"onSubmitClick()\\\">\\n\\n      <div class=\\\"card mt-1\\\">\\n        <div class=\\\"card-header\\\">\\n          <h4>Sign Up</h4>\\n        </div>\\n\\n        <div class=\\\"card-body\\\">\\n\\n          <div class=\\\"form-group form-row\\\" formGroupName=\\\"personName\\\">\\n            <label for=\\\"firstName\\\" class=\\\"col-md-4 col-form-label\\\">First Name:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"text\\\" name=\\\"firstName\\\" id=\\\"firstName\\\" placeholder=\\\"First Name\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('personName.firstName').invalid && (signUpForm.get('personName.firstName').dirty || signUpForm.get('personName.firstName').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('personName.firstName').valid && (signUpForm.get('personName.firstName').dirty || signUpForm.get('personName.firstName').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('personName.firstName').invalid && (signUpForm.get('personName.firstName').dirty || signUpForm.get('personName.firstName').touched || signUpForm.submitted) && signUpForm.get('personName.firstName').errors?.required\\\">First name can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('personName.firstName').invalid && (signUpForm.get('personName.firstName').dirty || signUpForm.get('personName.firstName').touched || signUpForm.submitted) && signUpForm.get('personName.firstName').errors?.minlength\\\">First name should contain at least 2 characters</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\" formGroupName=\\\"personName\\\">\\n            <label for=\\\"lastName\\\" class=\\\"col-md-4 col-form-label\\\">Last Name:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"text\\\" name=\\\"lastName\\\" id=\\\"lastName\\\" placeholder=\\\"Last Name\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('personName.lastName').invalid && (signUpForm.get('personName.lastName').dirty || signUpForm.get('personName.lastName').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('personName.lastName').valid && (signUpForm.get('personName.lastName').dirty || signUpForm.get('personName.lastName').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('personName.lastName').invalid && (signUpForm.get('personName.lastName').dirty || signUpForm.get('personName.lastName').touched || signUpForm.submitted) && signUpForm.get('personName.lastName').errors?.required\\\">Last name can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('personName.lastName').invalid && (signUpForm.get('personName.lastName').dirty || signUpForm.get('personName.lastName').touched || signUpForm.submitted) && signUpForm.get('personName.lastName').errors?.minlength\\\">Last name should contain at least 2 characters</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"email\\\" class=\\\"col-md-4 col-form-label\\\">Email:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"text\\\" name=\\\"email\\\" id=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('email').invalid && (signUpForm.get('email').dirty || signUpForm.get('email').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('email').valid && (signUpForm.get('email').dirty || signUpForm.get('email').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('email').invalid && (signUpForm.get('email').dirty || signUpForm.get('email').touched || signUpForm.submitted) && signUpForm.get('email').errors?.required\\\">Email can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('email').invalid && (signUpForm.get('email').dirty || signUpForm.get('email').touched || signUpForm.submitted) && signUpForm.get('email').errors?.email\\\">Email is invalid</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('email').invalid && (signUpForm.get('email').dirty || signUpForm.get('email').touched || signUpForm.submitted) && signUpForm.get('email').errors?.uniqueEmail\\\">Email already exists</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"mobile\\\" class=\\\"col-md-4 col-form-label\\\">Mobile:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"text\\\" name=\\\"mobile\\\" id=\\\"mobile\\\" placeholder=\\\"Mobile\\\" class=\\\"form-control\\\" formControlName=\\\"mobile\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('mobile').invalid && (signUpForm.get('mobile').dirty || signUpForm.get('mobile').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('mobile').valid && (signUpForm.get('mobile').dirty || signUpForm.get('mobile').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('mobile').invalid && (signUpForm.get('mobile').dirty || signUpForm.get('mobile').touched || signUpForm.submitted) && signUpForm.get('mobile').errors?.required\\\">Mobile can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('mobile').invalid && (signUpForm.get('mobile').dirty || signUpForm.get('mobile').touched || signUpForm.submitted) && signUpForm.get('mobile').errors?.pattern\\\">Mobile is invalid</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"dateOfBirth\\\" class=\\\"col-md-4 col-form-label\\\">Date of Birth:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"date\\\" name=\\\"dateOfBirth\\\" id=\\\"dateOfBirth\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\" formControlName=\\\"dateOfBirth\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('dateOfBirth').invalid && (signUpForm.get('dateOfBirth').dirty || signUpForm.get('dateOfBirth').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('dateOfBirth').valid && (signUpForm.get('dateOfBirth').dirty || signUpForm.get('dateOfBirth').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('dateOfBirth').invalid && (signUpForm.get('dateOfBirth').dirty || signUpForm.get('dateOfBirth').touched || signUpForm.submitted) && signUpForm.get('dateOfBirth').errors?.required\\\">Date of Birth can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('dateOfBirth').invalid && (signUpForm.get('dateOfBirth').dirty || signUpForm.get('dateOfBirth').touched || signUpForm.submitted) && signUpForm.get('dateOfBirth').errors?.minAge\\\">Minimum Age must be 18</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"password\\\" class=\\\"col-md-4 col-form-label\\\">Password:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" placeholder=\\\"Password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('password').invalid && (signUpForm.get('password').dirty || signUpForm.get('password').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('password').valid && (signUpForm.get('password').dirty || signUpForm.get('password').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('password').invalid && (signUpForm.get('password').dirty || signUpForm.get('password').touched || signUpForm.submitted) && signUpForm.get('password').errors?.required\\\">Password can't be blank</span>\\n            </div>\\n          </div>\\n\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"confirmPassword\\\" class=\\\"col-md-4 col-form-label\\\">Confirm Password:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"password\\\" name=\\\"confirmPassword\\\" id=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\" class=\\\"form-control\\\" formControlName=\\\"confirmPassword\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('confirmPassword').invalid && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('confirmPassword').valid && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched || signUpForm.submitted) }\\\">\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('confirmPassword').invalid && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched || signUpForm.submitted) && signUpForm.get('confirmPassword').errors?.required\\\">Confirm Password can't be blank</span>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.invalid && (signUpForm.dirty || signUpForm.touched || signUpForm.submitted) && signUpForm.errors?.compareValidator\\\">Password and Confirm Password do not match</span>\\n            </div>\\n          </div>\\n\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label class=\\\"col-md-4 col-form-label\\\">Gender:</label>\\n            <div class=\\\"col-md-8\\\">\\n\\n              <div class=\\\"form-check-label form-check-inline\\\" *ngFor=\\\"let gender of genders\\\">\\n                <input type=\\\"radio\\\" name=\\\"gender\\\" [id]=\\\"gender\\\" [value]=\\\"gender\\\" class=\\\"form-check-input\\\" formControlName=\\\"gender\\\">\\n                <label [for]=\\\"gender\\\" class=\\\"form-check-label\\\">{{gender}}</label>\\n              </div>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('gender').invalid && (signUpForm.get('gender').dirty || signUpForm.get('gender').touched || signUpForm.submitted) && signUpForm.get('gender').errors?.required\\\">Please select gender</span>\\n\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label for=\\\"countryID\\\" class=\\\"col-md-4 col-form-label\\\">Country:</label>\\n            <div class=\\\"col-md-8\\\">\\n              <select name=\\\"countryID\\\" id=\\\"countryID\\\" class=\\\"form-control\\\" formControlName=\\\"countryID\\\" [ngClass]=\\\"{\\n                'is-invalid': signUpForm.get('countryID').invalid && (signUpForm.get('countryID').dirty || signUpForm.get('countryID').touched || signUpForm.submitted),\\n\\n                'is-valid': signUpForm.get('countryID').valid && (signUpForm.get('countryID').dirty || signUpForm.get('countryID').touched || signUpForm.submitted) }\\\">\\n                <option value=\\\"null\\\">Please Select</option>\\n                <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.countryID\\\">\\n                  {{country.countryName}}\\n                </option>\\n              </select>\\n\\n              <span class=\\\"text-danger\\\" *ngIf=\\\"signUpForm.get('countryID').invalid && (signUpForm.get('countryID').dirty || signUpForm.get('countryID').touched || signUpForm.submitted) && signUpForm.get('countryID').errors?.required\\\">Please select country</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label class=\\\"col-md-4 col-form-label\\\"></label>\\n            <div class=\\\"col-md-8\\\">\\n              <input type=\\\"checkbox\\\" name=\\\"receiveNewsLetters\\\" id=\\\"receiveNewsLetters\\\" value=\\\"true\\\" class=\\\"form-check-input\\\" formControlName=\\\"receiveNewsLetters\\\">\\n              <label for=\\\"receiveNewsLetters\\\" class=\\\"form-check-label\\\">Receive News Letters</label>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group form-row\\\">\\n            <label class=\\\"col-md-4 col-form-label\\\">Skills:</label>\\n            <div class=\\\"col-md-8\\\" formArrayName=\\\"skills\\\">\\n              <div class=\\\"row\\\" *ngFor=\\\"let skill of signUpForm.get('skills').controls; let i = index\\\" [formGroupName]=\\\"i\\\">\\n\\n                <div class=\\\"col-5\\\">\\n                  <input type=\\\"text\\\" name=\\\"skillName\\\" id=\\\"skillName\\\" placeholder=\\\"Skill Name\\\" formControlName=\\\"skillName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{\\n                    'is-invalid': skill.get('skillName').invalid && (skill.get('skillName').dirty || skill.get('skillName').touched || signUpForm.submitted),\\n    \\n                    'is-valid': skill.get('skillName').valid && (skill.get('skillName').dirty || skill.get('skillName').touched || signUpForm.submitted) }\\\">\\n                </div>\\n\\n                <div class=\\\"col-4\\\">\\n                  <select name=\\\"level\\\" id=\\\"level\\\" formControlName=\\\"level\\\" class=\\\"form-control\\\" [ngClass]=\\\"{\\n                    'is-invalid': skill.get('level').invalid && (skill.get('level').dirty || skill.get('level').touched || signUpForm.submitted),\\n    \\n                    'is-valid': skill.get('level').valid && (skill.get('level').dirty || skill.get('level').touched || signUpForm.submitted) }\\\">\\n                    <option value=\\\"null\\\">Please Select</option>\\n                    <option value=\\\"Beginner\\\">Beginner</option>\\n                    <option value=\\\"Intermediate\\\">Intermediate</option>\\n                    <option value=\\\"Professional\\\">Professional</option>\\n                    <option value=\\\"Expert\\\">Expert</option>\\n                  </select>\\n                </div>\\n\\n                <div class=\\\"col-3\\\">\\n                  <button class=\\\"btn btn-danger\\\" type=\\\"button\\\" (click)=\\\"onRemoveClick(i)\\\">Remove</button>\\n                </div>\\n              </div>\\n\\n              <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"onAddSkill()\\\">Add Skill</button>\\n            </div>\\n\\n          </div>\\n\\n          <!-- {{signUpForm.value | json}} -->\\n        </div>\\n\\n        <div class=\\\"card-footer\\\">\\n          <button class=\\\"btn btn-success float-right\\\">Create Account</button>\\n          <div class=\\\"text-danger\\\">{{registerError}}</div>\\n        </div>\\n\\n      </div>\\n\\n    </form>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NpZ24tdXAvc2lnbi11cC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormArray, FormBuilder, Validators } from '@angular/forms';\nimport { CountriesService } from '../countries.service';\nimport { Country } from '../country';\nimport { CustomValidatorsService } from '../custom-validators.service';\nimport { SignUpViewModel } from '../sign-up-view-model';\nimport { LoginService } from '../login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit\n{\n  signUpForm: FormGroup;\n  genders = [\"male\", \"female\"];\n  countries: Country[] = [];\n  registerError: string = null;\n\n  constructor(private countriesService: CountriesService, private formBuilder: FormBuilder, private customValidatorsService: CustomValidatorsService, private loginService: LoginService, private router: Router)\n  {\n  }\n\n  ngOnInit()\n  {\n    this.countriesService.getCountries().subscribe((response) =>\n    {\n      this.countries = response;\n    });\n\n    this.signUpForm = this.formBuilder.group({\n      personName: this.formBuilder.group({\n        firstName: [null, [Validators.required, Validators.minLength(2)]],\n        lastName: [null, [Validators.required, Validators.minLength(2)]],\n      }),\n\n      email: [null, [Validators.required, Validators.email], [ this.customValidatorsService.DuplicateEmailValidator() ], {updateOn: 'blur'}],\n      mobile: [null, [Validators.required, Validators.pattern(/^[789]\\d{9}$/)]],\n      dateOfBirth: [null, [Validators.required, this.customValidatorsService.minimumAgeValidator(18)]],\n      password: [null, [Validators.required]],\n      confirmPassword: [null, [Validators.required]],\n      gender: [null, [Validators.required]],\n      countryID: [null, [Validators.required]],\n      receiveNewsLetters: [null],\n      skills: this.formBuilder.array([])\n    },\n      {\n        validators: [\n          this.customValidatorsService.compareValidator(\"confirmPassword\", \"password\")\n        ]\n      });\n\n    this.signUpForm.valueChanges.subscribe((value) =>\n    {\n      //console.log(value);\n    });\n  }\n\n  onSubmitClick()\n  {\n    //Display current form value\n    this.signUpForm[\"submitted\"] = true;\n    console.log(this.signUpForm);\n\n    if (this.signUpForm.valid)\n    {\n      var signUpVieModel = this.signUpForm.value as SignUpViewModel;\n      this.loginService.Register(signUpVieModel).subscribe(\n        (response) =>\n        {\n          this.router.navigate([\"tasks\"]);\n        },\n        (error) =>\n        {\n          console.log(error);\n          this.registerError = \"Unable to submit\";\n        });\n    }\n\n    //setValue\n    // this.signUpForm.setValue({\n    //   firstName: \"Adam\",\n    //   lastName: \"Smith\",\n    //   email: \"smith@gmail.com\",\n    //   mobile: \"9876543210\",\n    //   dateOfBirth: \"2020-01-01\",\n    //   gender: \"male\",\n    //   countryID: 3,\n    //   receiveNewsLetters: true\n    // });\n\n    //patchValue\n    // this.signUpForm.patchValue({\n    //   firstName: \"Adam\",\n    //   lastName: \"Smith\",\n    //   email: \"smith@gmail.com\"\n    // });\n\n    //reset\n    //this.signUpForm.reset();\n\n    //reset with Parameters\n    // this.signUpForm.reset({\n    //   firstName: \"Adam\",\n    //   lastName: \"Smith\",\n    //   email: \"smith@gmail.com\"\n    // });\n  }\n\n  onAddSkill()\n  {\n    var formGroup = new FormGroup({\n      skillName: new FormControl(null, [Validators.required]),\n      skillLevel: new FormControl(null, [Validators.required])\n    });\n\n    (<FormArray>this.signUpForm.get(\"skills\")).push(formGroup);\n  }\n\n  onRemoveClick(index: number)\n  {\n    (<FormArray>this.signUpForm.get(\"skills\")).removeAt(index);\n  }\n}\n","module.exports = \"<p>\\n  tasks works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2tzL3Rhc2tzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.scss']\n})\nexport class TasksComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n  selector: '[appTeamSizeValidator]',\n  providers: [ {provide: NG_VALIDATORS, useExisting: TeamSizeValidatorDirective, multi: true }]\n})\nexport class TeamSizeValidatorDirective implements Validator\n{\n  constructor()\n  {\n  }\n\n  @Input(\"appTeamSizeValidator\") n : number;\n  \n  validate(control: AbstractControl) : ValidationErrors | null\n  {\n    let currentValue = control.value;\n    let isValid = currentValue % this.n == 0;\n\n    if (isValid)\n    {\n      return null; //valid\n    }\n    else\n    {\n      return { divisible: { valid: false } }; //indicates invalid\n    }\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}